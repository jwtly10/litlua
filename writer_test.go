package litlua

import (
	"fmt"
	"github.com/stretchr/testify/require"
	"gotest.tools/v3/golden"
	"log/slog"
	"os"
	"strings"
	"testing"
	"time"
)

func TestCanWriteToPrettyFile(t *testing.T) {
	d := Document{
		Metadata: MetaData{
			AbsSource: "test.md",
		},
		Blocks: []CodeBlock{
			{
				Code: "print(\"Hello World\")",
			},
			{
				Code: "print(\"Goodbye World\")\n",
			},
		},
	}

	var output strings.Builder
	w := NewWriter(ModePretty)

	now := time.Now()

	metadata := WriterMetadata{
		Version:   "v0.0.2",
		AbsSource: d.Metadata.AbsSource,
		Generated: time.Now().Format(time.RFC3339),
	}

	if err := w.WriteHeader(&output, metadata); err != nil {
		t.Fatalf("Error writing document: %v", err)
	}
	if err := w.WriteContent(&d, &output); err != nil {
		t.Fatalf("Error writing document: %v", err)
	}

	expected := fmt.Sprintf(`-- Generated by LitLua (https://www.github.com/jwtly10/litlua) v0.0.2
-- Source: %s
-- Generated: %s

-- WARNING: This is an auto-generated file.
-- Do not modify this file directly as changes will be overwritten on next compilation.
-- Instead, modify the source markdown file and recompile.

print("Hello World")
print("Goodbye World")

`, "test.md", now.Format(time.RFC3339))
	require.Equal(t, expected, output.String())
}

func TestCanWriteToShadowFile(t *testing.T) {
	slog.SetDefault(
		slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{
			Level: slog.LevelDebug,
		})))

	tests := []struct {
		name       string
		document   Document
		goldenFile string
	}{
		{
			name:       "can write document struct to lsp shadow file",
			goldenFile: "lsp_shadow.golden.lua",
			// This document is the parser output of testdata/parser/basic_valid.md
			document: Document{
				Metadata: MetaData{},
				Pragmas: Pragma{
					Output: "init.lua",
					Debug:  true,
				},
				Blocks: []CodeBlock{
					{
						Code: "print(\"Hello World\")",
						Position: Position{
							StartLine: 10,
							EndLine:   11,
						},
					},
					{
						Code: "print(\"Goodbye World\")\n",
						Position: Position{
							StartLine: 15,
							EndLine:   17,
						},
					},
					{
						Code: "print(\"Goodbye World\")\n-- This is a multiline lua src",
						Position: Position{
							StartLine: 20,
							EndLine:   22,
						},
					},
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var output strings.Builder
			lspWriter := NewWriter(ModeShadow)

			if err := lspWriter.WriteContent(&tt.document, &output); err != nil {
				t.Fatalf("Error writing document: %v", err)
			}

			slog.Info(output.String())

			golden.Assert(t, output.String(), tt.goldenFile)
		})
	}
}
